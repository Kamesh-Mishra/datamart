version: '3.2'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.3.1
    restart: on-failure
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Des.enforce.bootstrap.checks=true
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - ES_HEAP_SIZE=4g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    volumes:
      - ./volumes/elasticsearch:/usr/share/elasticsearch/data
  elasticsearch_exporter:
    image: justwatch/elasticsearch_exporter:1.1.0
    restart: on-failure
    command:
      - '--es.uri=http://elasticsearch:9200'
    ports:
      - 9114
  rabbitmq:
    image: remram/rabbitmq:3.7.8
    build:
      context: ./docker
      dockerfile: rabbitmq.dockerfile
    environment:
      - RABBITMQ_DEFAULT_USER=${AMQP_USER}
      - RABBITMQ_DEFAULT_PASS=${AMQP_PASSWORD}
    ports:
      - 8080:15672
      - 5672:5672
  lazo_server:
    image: registry.gitlab.com/vida-nyu/datamart/lazo-index-service:0.0.6
    environment:
      - DATABASE=elasticsearch
      - PORT=50051
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    ports:
      - 50051:50051
    volumes:
      - ./volumes/datasets:/datasets
      - ./volumes/dataset-cache:/dataset_cache
  coordinator:
    build:
      context: .
      dockerfile: coordinator/Dockerfile
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
      - AMQP_HOST=rabbitmq
      - AMQP_USER=${AMQP_USER}
      - AMQP_PASSWORD=${AMQP_PASSWORD}
      - QUERY_HOST=${QUERY_HOST}
    # CI: command: ["bash", "-c", "set -m; coverage run --branch -p -m coordinator & PROCESS=$$!; trap \"kill -INT $$PROCESS\" INT TERM; wait $$PROCESS; wait $$PROCESS; cp .coverage* /cov/"]
    ports:
      - 8001:8001
    volumes:
      # CI: - ./cov:/cov
      - ./volumes/datasets:/datasets
      - ./volumes/dataset-cache:/dataset_cache
      - ./volumes/query-cache:/cache
  query:
    build:
      context: .
      dockerfile: query/Dockerfile
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
      - AMQP_HOST=rabbitmq
      - AMQP_USER=${AMQP_USER}
      - AMQP_PASSWORD=${AMQP_PASSWORD}
      - LAZO_SERVER_HOST=lazo_server
      - LAZO_SERVER_PORT=50051
    ports:
      - 8002
    # CI: command: ["bash", "-c", "set -m; coverage run --branch -p -m query & PROCESS=$$!; trap \"kill -INT $$PROCESS\" INT TERM; wait $$PROCESS; wait $$PROCESS; cp .coverage* /cov/"]
    volumes:
      # CI: - ./cov:/cov
      - ./volumes/datasets:/datasets
      - ./volumes/dataset-cache:/dataset_cache
      - ./volumes/query-cache:/cache
  querylb:
    image: haproxy:2.0
    ports:
      - 8002:80
      - 8081:8000
    volumes:
      - ./docker/haproxy.conf:/usr/local/etc/haproxy/haproxy.cfg:ro
  profiler:
    build:
      context: .
      dockerfile: profiler/Dockerfile
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
      - AMQP_HOST=rabbitmq
      - AMQP_USER=${AMQP_USER}
      - AMQP_PASSWORD=${AMQP_PASSWORD}
      - LAZO_SERVER_HOST=lazo_server
      - LAZO_SERVER_PORT=50051
    # CI: command: ["bash", "-c", "set -m; coverage run --branch -p -m profiler & PROCESS=$$!; trap \"kill -INT $$PROCESS\" INT TERM; wait $$PROCESS; wait $$PROCESS; cp .coverage* /cov/"]
    volumes:
      # CI: - ./cov:/cov
      - ./volumes/datasets:/datasets
      - ./volumes/dataset-cache:/dataset_cache
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./volumes/prometheus:/prometheus
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
  example_discoverer:
    build:
      context: .
      dockerfile: discovery/Dockerfile
    command: example
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
      - AMQP_HOST=rabbitmq
      - AMQP_USER=${AMQP_USER}
      - AMQP_PASSWORD=${AMQP_PASSWORD}
      - LAZO_SERVER_HOST=lazo_server
      - LAZO_SERVER_PORT=50051
    volumes:
      - ./volumes/datasets:/datasets
  test_discoverer:
    build:
      context: .
      dockerfile: discovery/Dockerfile
    command: testsuite
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
      - AMQP_HOST=rabbitmq
      - AMQP_USER=${AMQP_USER}
      - AMQP_PASSWORD=${AMQP_PASSWORD}
      - LAZO_SERVER_HOST=lazo_server
      - LAZO_SERVER_PORT=50051
    volumes:
      - ./volumes/datasets:/datasets
  socrata:
    build:
      context: .
      dockerfile: discovery/socrata/Dockerfile
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
      - AMQP_HOST=rabbitmq
      - AMQP_USER=${AMQP_USER}
      - AMQP_PASSWORD=${AMQP_PASSWORD}
      - LAZO_SERVER_HOST=lazo_server
      - LAZO_SERVER_PORT=50051
    volumes:
      - ./volumes/dataset-cache:/dataset_cache
  noaa:
    build:
      context: .
      dockerfile: discovery/noaa/Dockerfile
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
      - AMQP_HOST=rabbitmq
      - AMQP_USER=${AMQP_USER}
      - AMQP_PASSWORD=${AMQP_PASSWORD}
      - NOAA_TOKEN=${NOAA_TOKEN}
      - LAZO_SERVER_HOST=lazo_server
      - LAZO_SERVER_PORT=50051
